## Input Arguments:
# LOCAL_MODULE: name of the .ko to be generated (e.g. kp_module.ko)
# LOCAL_MODULE_PATH: location to put the module, $(KERNEL_MODULES_OUT)
#                    for a common output directory
# LOCAL_MODULE_KBUILD_NAME: name of the .ko that is generated by kbuild (see below)
# LOCAL_ADDITIONAL_DEPENDENCIES: just that
# LOCAL_EXPORT_KO_INCLUDE_DIRS: List of directories other KOs include when listed in KBUILD_REQUIRED_KOS
# KBUILD_OPTIONS: Additional parameters to give to kbuild when compiling module
# KBUILD_REQUIRED_KOS: Add dependency on another KO which exports headers and/or symbols
# LOCAL_MODULE_DDK_BUILD: Enable the Bazel DDK build
# LOCAL_MODULE_KO_DIRS: List of modules which should be copied to a subdirectory after build
# LOCAL_MODULE_DDK_ALLOW_UNSAFE_HEADERS: Allow unsafe (internal) headers to be used by DDK
# LOCAL_MODULE_DDK_SUBTARGET_REGEX: Set a subtarget regular expression to match within a target/variant combo
# LOCAL_MODULE_DDK_EXTRA_ARGS: Extra arguments to pass to the Bazel build invocation

# Assign external kernel modules to the DLKM class
LOCAL_MODULE_CLASS := DLKM

# LOCAL_MODULE_KBUILD_NAME is the name of the .ko that kernel makefiles generate
# for instance, one could write my_device.ko, but want it to be called
# the_device.ko on vendor image (and rest of Android build system)
ifeq ($(LOCAL_MODULE_KBUILD_NAME),)
    LOCAL_MODULE_KBUILD_NAME := $(LOCAL_MODULE)
endif
LOCAL_MODULE_KBUILD_NAME := $(strip $(LOCAL_MODULE_KBUILD_NAME))

# See binary.mk and base_rules.mk
LOCAL_REQUIRED_MODULES += $(KBUILD_REQUIRED_KOS)
ifdef RECORD_ALL_DEPS
ALL_DEPS.$(LOCAL_MODULE).ALL_DEPS += $(KBUILD_REQUIRED_KOS)
endif
$(foreach dep,$(KBUILD_REQUIRED_KOS), $(eval EXPORTS.$$(dep).USERS := $$(EXPORTS.$$(dep).USERS) $(LOCAL_MODULE)))
EXPORTS.$(LOCAL_MODULE).FLAGS := $(foreach d,$(LOCAL_EXPORT_KO_INCLUDE_DIRS),-I$d)
ALL_MODULES.$(LOCAL_MODULE).IMPORTS += $(KBUILD_REQUIRED_KOS)
ALL_DEPS.$(LOCAL_MODULE).ALL_DEPS += $(KBUILD_REQUIRED_KOS)

# LOCAL_MODULE_DDK_BUILD enables the Bazel DDK module build.
# If unset, the default is to build with the legacy Make system.
ifeq ($(LOCAL_MODULE_DDK_BUILD),)
    LOCAL_MODULE_DDK_BUILD := false
endif

# By default, do not allow unsafe headers to be used
ifeq ($(LOCAL_MODULE_DDK_ALLOW_UNSAFE_HEADERS),)
    LOCAL_MODULE_DDK_ALLOW_UNSAFE_HEADERS := false
endif

# By default, match any dist target for the target/variant combo
ifeq ($(LOCAL_MODULE_DDK_SUBTARGET_REGEX),)
    LOCAL_MODULE_DDK_SUBTARGET_REGEX := ".*"
endif

# By default, no extra arguments will be passed
ifeq ($(LOCAL_MODULE_DDK_EXTRA_ARGS),)
    LOCAL_MODULE_DDK_EXTRA_ARGS :=
endif

include $(BUILD_SYSTEM)/base_rules.mk

################################################################################
KERNEL_PLATFORM_PATH:=kernel_platform
KERNEL_PLATFORM_TO_ROOT:=../

################################################################################
KP_DLKM_INTERMEDIATE:=$(TARGET_OUT_INTERMEDIATES)/DLKM_OBJ
# Intermediate directory where the kernel modules are created
# by the kernel platform. Ideally this would be the same
# directory as LOCAL_BUILT_MODULE, but because we're using
# relative paths for both O= and M=, we don't have much choice
MODULE_KP_OUT_DIR := $(KP_DLKM_INTERMEDIATE)/$(LOCAL_PATH)

# The kernel build system doesn't support parallel kernel module builds
# that share the same output directory. Thus, in order to build multiple
# kernel modules that reside in a single directory (and therefore have
# the same output directory), there must be just one invocation of the
# kernel build system that builds all the modules of a given directory.
#
# Therefore, all kernel modules must depend on the same, unique target
# that invokes the kernel build system and builds all of the modules
# for the directory. The $(MODULE_KP_COMBINED_TARGET) target serves this purpose.
MODULE_KP_COMBINED_TARGET := $(MODULE_KP_OUT_DIR)/buildko.timestamp
# When MODULE_KP_COMBINED_TARGET is built, then out pops the MODULE_KP_TARGET (by essentially running `make modules`)
MODULE_KP_TARGET := $(MODULE_KP_OUT_DIR)/$(LOCAL_MODULE_KBUILD_NAME)

# The final built module for Android Build System
$(LOCAL_BUILT_MODULE): $(MODULE_KP_TARGET) | $(ACP)
	$(transform-prebuilt-to-target)

# Add Module.symvers as extra intermediate if we're creating a KO
ifneq ($(filter %.ko,$(LOCAL_MODULE_KBUILD_NAME)),)
# Grep would fail if this DLKM doesn't export any symbols, so handle that it might fail
intermediate_export_symvers := $(call local-intermediates-dir)/Module.symvers
$(intermediate_export_symvers): local_module_kbuild_name := $(LOCAL_MODULE_KBUILD_NAME)
$(intermediate_export_symvers): $(MODULE_KP_OUT_DIR)/Module.symvers
	-grep $(basename $(notdir $(local_module_kbuild_name))) $< > $@
	touch $@

LOCAL_INTERMEDIATE_TARGETS += $(intermediate_export_symvers)

# Module.symvers generated via the combined target (make modules)
$(MODULE_KP_OUT_DIR)/Module.symvers: $(MODULE_KP_COMBINED_TARGET)

intermediate_export_symvers :=
endif

# To build the module inside kernel_platform, depend on the kbuild_target
$(MODULE_KP_TARGET): $(MODULE_KP_COMBINED_TARGET)
$(MODULE_KP_TARGET): $(LOCAL_ADDITIONAL_DEPENDENCIES)

# Ensure the kernel module created by the kernel build system, as
# well as all the other intermediate files, are removed during a clean.
$(cleantarget): PRIVATE_CLEAN_FILES := $(PRIVATE_CLEAN_FILES) $(MODULE_KP_OUT_DIR)

$(MODULE_KP_COMBINED_TARGET): $(LOCAL_ADDITIONAL_DEPENDENCIES)
$(MODULE_KP_COMBINED_TARGET): $(foreach file,$(LOCAL_SRC_FILES), \
						$(or $(wildcard $(local_path)/$(file)), \
						  $(wildcard $(file)), \
						  $(error File: $(file) doesn't exist)))
KERNEL_PREBUILT_DIR ?= device/qcom/$(TARGET_BOARD_PLATFORM)-kernel

# Use $(wildcard $(KERNEL_PREBUILT_DIR)/.config) as an indicator of KERNEL_KIT support
# KERNEL_KIT support removes the requirement on a full prebuilt kernel platform output tree,
# instead just the prebuilt kernel platform DIST_DIR. The DIST_DIR is copied to
# device/qcom/*-kernel by prepare_vendor.sh.
ifneq ($(wildcard $(KERNEL_PREBUILT_DIR)/.config),)

# We need to run make modules_prepare before compiling out-of-tree modules
# As with other Kbuild commands, there should only be one build command running modules_prepare,
# so guard it with obj/DLKM_OBJ/build.timestamp file
MODULE_KP_COMMON_TARGET := $(KP_DLKM_INTERMEDIATE)/build.timestamp
ifndef $(MODULE_KP_COMMON_TARGET)_RULE
$(MODULE_KP_COMMON_TARGET)_RULE := 1

$(MODULE_KP_COMMON_TARGET): $(KERNEL_PREBUILT_DIR)/.config $(KERNEL_PREBUILT_DIR)/Module.symvers
	(cd $(KERNEL_PLATFORM_PATH) && \
	    OUT_DIR=$(KERNEL_PLATFORM_TO_ROOT)/$(KP_DLKM_INTERMEDIATE)/kernel_platform \
	    KERNEL_KIT=$(KERNEL_PLATFORM_TO_ROOT)/$(KERNEL_PREBUILT_DIR) \
	    ./build/build_module.sh $(kbuild_options) \
	    ANDROID_BUILD_TOP=$$(realpath $$(pwd)/$(KERNEL_PLATFORM_TO_ROOT)) \
	)
	touch $@
endif

ifndef $(MODULE_KP_COMBINED_TARGET)_RULE
$(MODULE_KP_COMBINED_TARGET)_RULE := 1

# Kernel modules have to be built after:
#  * the kernel config has been created
#  * host executables, like scripts/basic/fixdep, have been built
#    (otherwise parallel invocations of the kernel build system will
#    fail as they all try to compile these executables at the same time)
#  * Module.symvers is available (prebuilt or after full kernel build)
$(MODULE_KP_COMBINED_TARGET): local_path     := $(LOCAL_PATH)
$(MODULE_KP_COMBINED_TARGET): local_out      := $(MODULE_KP_OUT_DIR)
$(MODULE_KP_COMBINED_TARGET): kbuild_options := $(KBUILD_OPTIONS)
$(MODULE_KP_COMBINED_TARGET): required_kos   := $(KBUILD_REQUIRED_KOS)
$(MODULE_KP_COMBINED_TARGET): kbuild_symvers := $(sort $(foreach m,$(required_kos),$(call intermediates-dir-for,DLKM,$m)/Module.symvers))
$(MODULE_KP_COMBINED_TARGET): ddk_build      := $(LOCAL_MODULE_DDK_BUILD)
$(MODULE_KP_COMBINED_TARGET): unsafe_hdrs    := $(LOCAL_MODULE_DDK_ALLOW_UNSAFE_HEADERS)
$(MODULE_KP_COMBINED_TARGET): inter_dir      := $(call intermediates-dir-for,DLKM,$(LOCAL_MODULE))
$(MODULE_KP_COMBINED_TARGET): ko_dirs        := $(LOCAL_MODULE_KO_DIRS)
$(MODULE_KP_COMBINED_TARGET): platform       := $(TARGET_BOARD_PLATFORM)
$(MODULE_KP_COMBINED_TARGET): subtarget_re   := $(LOCAL_MODULE_DDK_SUBTARGET_REGEX)
$(MODULE_KP_COMBINED_TARGET): extra_args     := $(LOCAL_MODULE_DDK_EXTRA_ARGS)
$(MODULE_KP_COMBINED_TARGET): $(MODULE_KP_COMMON_TARGET) $(sort $(foreach m,$(KBUILD_REQUIRED_KOS),$(call intermediates-dir-for,DLKM,$m)/Module.symvers))
	export ANDROID_BUILD_TOP=$$(pwd) ; export KP_OUT_DIR=$$(cd $(KP_DLKM_INTERMEDIATE)/kernel_platform ; pwd) ; \
	(cd $(KERNEL_PLATFORM_PATH) && \
	    EXT_MODULES=$(KERNEL_PLATFORM_TO_ROOT)/$(local_path) \
	    OUT_DIR=$${KP_OUT_DIR} \
	    KERNEL_KIT=$${ANDROID_BUILD_TOP}/$(KERNEL_PREBUILT_DIR) \
	    ENABLE_DDK_BUILD=$(ddk_build) \
	    ALLOW_UNSAFE_DDK_HEADERS=$(unsafe_hdrs) \
	    INTERMEDIATE_DIR=$${ANDROID_BUILD_TOP}/$(inter_dir) \
	    KO_DIRS="$(ko_dirs)" \
	    TARGET_BOARD_PLATFORM=$(platform) \
	    SUBTARGET_REGEX=$(subtarget_re) \
	    EXTRA_DDK_ARGS="$(extra_args)" \
	    $(if $(kbuild_symvers),KBUILD_EXTRA_SYMBOLS="$(addprefix $${ANDROID_BUILD_TOP}/,$(kbuild_symvers))") \
	    $(if $(required_kos),KCFLAGS="$(sort $(foreach d,$(required_kos),$(patsubst -I%,-I$${ANDROID_BUILD_TOP}/%,$(EXPORTS.$d.FLAGS))))") \
	    ./build/build_module.sh $(kbuild_options) \
	)
	touch $@

endif

else # Use old full prebuilt kernel platform method

$(error Old full prebulit kernel platform is deprecated. Upgrade to newer kernel platform which has KERNEL_KIT support)

endif

# Once the KBUILD_OPTIONS variable has been used for the target
# that's specific to the LOCAL_PATH, clear it. If this isn't done,
# then every kernel module would need to explicitly set KBUILD_OPTIONS,
# or the variable would have to be cleared in 'include $(CLEAR_VARS)'
# which would require a change to build/core.
KBUILD_OPTIONS :=
KBUILD_REQUIRED_KOS :=
LOCAL_ADDITIONAL_DEPENDENCIES :=
LOCAL_MODULE_KBUILD_NAME :=
LOCAL_MODULE_DDK_BUILD :=
LOCAL_MODULE_KO_DIRS :=
LOCAL_MODULE_DDK_ALLOW_UNSAFE_HEADERS :=
LOCAL_MODULE_DDK_SUBTARGET_REGEX :=
LOCAL_MODULE_DDK_EXTRA_ARGS :=
