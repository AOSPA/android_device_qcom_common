# Copyright (c) 2017, The Linux Foundation. All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#    * Neither the name of The Linux Foundation nor the names of its
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

allow hal_camera qdisplay_service:service_manager find;
#allow hal_camera surfaceflinger_service:service_manager find;
# added now for camera functionality. This should be using HIDL
#userdebug_or_eng(`
#binder_use(hal_camera)
#')
binder_call(hal_camera, surfaceflinger)
set_prop(hal_camera, camera_prop)
allow hal_camera gpu_device:chr_file rw_file_perms;

allow hal_camera sysfs_jpeg:file r_file_perms;

#changes to access laser device
allow hal_camera input_device:chr_file r_file_perms;
r_dir_file(hal_camera, input_device);
allow hal_camera sysfs_laser:file w_file_perms;
r_dir_file(hal_camera, sysfs_laser);

vndbinder_use(hal_camera);
hal_client_domain(hal_camera_default, hal_perf)

#needed for full_treble
binder_call(hal_camera, hal_graphics_composer_default)
allow hal_camera_default hal_graphics_mapper_hwservice:hwservice_manager find;

allow hal_camera_default mnt_vendor_file:dir r_dir_perms;

r_dir_file(hal_camera_default, sensors_persist_file);
r_dir_file(hal_camera_default, sysfs_graphics)
#allow hal_camera to access Isensormanager
allow hal_camera fwk_sensor_hwservice:hwservice_manager find;
binder_call(hal_camera, system_server)
allow hal_camera_default fwk_display_hwservice:hwservice_manager find;
# from sensors team

allow hal_camera self:{ socket qipcrtr_socket } create_socket_perms;
allowxperm hal_camera self:{ socket qipcrtr_socket } ioctl msm_sock_ipc_ioctls;

allow hal_camera_default sysfs_data:file read;
allow hal_camera sysfs_data:file r_file_perms;

allow hal_camera vendor_camera_data_file:dir rw_dir_perms;
allow hal_camera vendor_camera_data_file:file create_file_perms;
allow hal_camera vendor_camera_data_file:sock_file write;
userdebug_or_eng(`
allow hal_camera vendor_camera_data_file:file create_file_perms;
')
unix_socket_connect(hal_camera, thermal, thermal-engine)

#Allows camera to call ADSP QDSP6 functionality
allow hal_camera qdsp_device:chr_file r_file_perms;

#allow camera to access /dsp
r_dir_file(hal_camera, adsprpcd_file);
#allow camera to access vendor_adsprpc_prop
get_prop(hal_camera, vendor_adsprpc_prop)

allow hal_camera_default mm-qcamerad:unix_dgram_socket sendto;
get_prop( hal_camera_default, vendor_video_prop)

allow hal_camera_default sysfs_soc:dir r_dir_perms;
