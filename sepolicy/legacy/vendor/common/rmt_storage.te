# Copyright (c) 2019, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# rmt_storage - rmt_storage daemon
type rmt_storage, domain;
type rmt_storage_exec, exec_type, vendor_file_type, file_type;
init_daemon_domain(rmt_storage)

allow rmt_storage {
    modem_efs_partition_device
    root_block_device
    ssd_device
}:blk_file rw_file_perms;
allow rmt_storage block_device:dir r_dir_perms;
allow rmt_storage cgroup:dir create_dir_perms;
allow rmt_storage { smem_log_device uio_device }:chr_file rw_file_perms;

# sys_admin is needed for ioprio_set
allow rmt_storage self:capability {
    setuid
    setgid
    net_bind_service
    setpcap
};

set_prop(rmt_storage, vendor_ctl_vendor_rmt_storage_prop)

#For Wakelocks
wakelock_use(rmt_storage)

allow rmt_storage self:{ socket qipcrtr_socket } create_socket_perms;
allowxperm rmt_storage self:{ socket qipcrtr_socket } ioctl msm_sock_ipc_ioctls;
allow rmt_storage uio_device:chr_file rw_file_perms;

#For access to the kmsg device
allow rmt_storage kmsg_device:chr_file w_file_perms;

#sysfs_uio
r_dir_file(rmt_storage, sysfs_uio)
r_dir_file(rmt_storage, sysfs_uio_file)
