# Copyright (c) 2017, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# hal_gnss_qti - binerized gnss hal
type hal_gnss_qti, domain;
type hal_gnss_qti_exec, exec_type, vendor_file_type, file_type;
init_daemon_domain(hal_gnss_qti)

hal_server_domain(hal_gnss_qti, hal_gnss)
# Allow Gnss HAL to get updates from health hal
hal_client_domain(hal_gnss_qti, hal_health)

allow hal_gnss_qti location_data_file:dir r_dir_perms;
allow hal_gnss location_data_file:file create_file_perms;
allow hal_gnss location_socket:sock_file create_file_perms;
allow hal_gnss location_socket:dir rw_dir_perms;
allow hal_gnss location:unix_stream_socket connectto;
allow hal_gnss location:unix_dgram_socket sendto;

unix_socket_connect(hal_gnss, location, location)

netmgr_socket(hal_gnss)
allow hal_gnss self:{
    socket
    netlink_socket
    netlink_generic_socket
    qipcrtr_socket
} create_socket_perms_no_ioctl;
allow hal_gnss self:netlink_route_socket { create_socket_perms_no_ioctl nlmsg_read nlmsg_write };

allow hal_gnss self:{ socket qipcrtr_socket } rw_socket_perms;
allow hal_gnss sysfs_data:file r_file_perms;

allow hal_gnss self:socket { create ioctl };

allowxperm hal_gnss self:{ socket qipcrtr_socket } ioctl msm_sock_ipc_ioctls;

userdebug_or_eng(`
  diag_use(hal_gnss);
  get_prop(hal_gnss, vendor_pd_locater_dbg_prop)
')
use_vendor_per_mgr(hal_gnss)

allow hal_gnss_qti sysfs_soc:dir r_dir_perms;
